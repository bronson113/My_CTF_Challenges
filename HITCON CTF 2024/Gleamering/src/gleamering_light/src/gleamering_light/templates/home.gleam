// DO NOT EDIT: Code generated by matcha from home.matcha

import gleam/string_builder.{type StringBuilder}
import gleam/list

import gleamering_light/templates/item as item_template
import gleamering_hope/item.{type Item, type Category}

pub fn render_builder(items items: List(Item), category category: Category) -> StringBuilder {
    let builder = string_builder.from_string("")
    let builder = string_builder.append(builder, "
")
    let builder = string_builder.append(builder, "
<!DOCTYPE html>
<html lang=\"en\">
<head>
  <meta charset=\"utf-8\">
  <link rel=\"shortcut icon\" href=\"/static/assets/lucy.svg\">
  <link rel=\"icon\" href=\"/static/assets/lucy.svg\">
  <link rel=\"stylesheet\" href=\"/static/assets/main.css\">
  <script src=\"/static/vendor/htmx.min.js\"></script>
  <title>Gleamering</title>
</head>
<body class=\"learn-bar\">
  <aside class=\"learn\">
    <header>
      <img id=\"logo\" src=\"/static/assets/lucy.svg\" alt=\"Gleam Logo\">
      <h3>Gleamering</h3>
    </header>
    <hr>
    <span>
      <h5>Original project: <a href=\"https://github.com/gleam-lang/example-todomvc\">Todomvc</a></h3>
    </span>
  </aside>

  <div class=\"gleamering-star-wrapper\">
    <section class=\"postapp\">
      <header class=\"header\">
        <h1>posts</h1>
        <form id=\"post-form\" hx-post=\"/posts\">
          <input
            autofocus
            required
            maxlength=\"500\"
            class=\"new-post\"
            placeholder=\"What needs to be complete?\"
            name=\"content\"
            autocomplete=\"off\"
          >
        </form>
      </header>

      <section class=\"main\">
        <ul id=\"post-list\" class=\"post-list\">
          ")
    let builder = list.fold(items, builder, fn(builder, item: Item) {
            let builder = string_builder.append(builder, "
          ")
    let builder = string_builder.append_builder(builder, item_template.render_builder(item,False))
    let builder = string_builder.append(builder, "
          ")

        builder
})
    let builder = string_builder.append(builder, "
        </ul>
      </section>

      <footer class=\"footer\">
        <ul class=\"filters\">
          <li>
            <a hx-boost=\"true\" class=\"")
    let builder = case category == item.All {
        True -> {
                let builder = string_builder.append(builder, "selected")

            builder
        }
        False -> {
            
            builder
        }
}
    let builder = string_builder.append(builder, "\" href=\"/home\">All</a>
          </li>
          <li>
            <a hx-boost=\"true\" class=\"")
    let builder = case category == item.Plain {
        True -> {
                let builder = string_builder.append(builder, "selected")

            builder
        }
        False -> {
            
            builder
        }
}
    let builder = string_builder.append(builder, "\" href=\"/plain\">Plain</a>
          </li>
          <li>
            <a hx-boost=\"true\" class=\"")
    let builder = case category == item.Encrypted {
        True -> {
                let builder = string_builder.append(builder, "selected")

            builder
        }
        False -> {
            
            builder
        }
}
    let builder = string_builder.append(builder, "\" href=\"/encrypted\">Encrypted</a>
          </li>
          <li>
            <a class=\"\" href=\"/logout\">Logout</a>
          </li>
        </ul>

      </footer>
    </section>
  </div>
</body>
</html>
")

    builder
}

pub fn render(items items: List(Item), category category: Category) -> String {
    string_builder.to_string(render_builder(items: items, category: category))
}

