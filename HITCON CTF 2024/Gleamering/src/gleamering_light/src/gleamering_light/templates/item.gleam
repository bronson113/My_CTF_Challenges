// DO NOT EDIT: Code generated by matcha from item.matcha

import gleam/string_builder.{type StringBuilder}

import gleam/int
import gleamering_hope/item.{type Item}
import glen

pub fn render_builder(item item: Item, editing editing: Bool) -> StringBuilder {
  let builder = string_builder.from_string("")
  let builder =
    string_builder.append(
      builder,
      "
",
    )
  let builder =
    string_builder.append(
      builder,
      "
<li 
  id=\"item-",
    )
  let builder = string_builder.append(builder, int.to_string(item.id))
  let builder =
    string_builder.append(
      builder,
      "\"
  class=\"",
    )
  let builder = case item.encrypted {
    True -> {
      let builder = string_builder.append(builder, "encrypted")

      builder
    }
    False -> {
      builder
    }
  }
  let builder =
    string_builder.append(
      builder,
      "\"
>
  <div class=\"view\">
    <input
      class=\"toggle\"
      type=\"checkbox\"
      autocomplete=\"off\"
      ",
    )
  let builder = case item.encrypted {
    True -> {
      let builder = string_builder.append(builder, "checked")

      builder
    }
    False -> {
      builder
    }
  }
  let builder =
    string_builder.append(
      builder,
      "
    >

    <label>
      ",
    )
  let builder = string_builder.append(builder, glen.escape_html(item.content))
  let builder =
    string_builder.append(
      builder,
      "
    </label>

    <a
      class=\"edit-btn\"
      hx-get=\"/posts/",
    )
  let builder = string_builder.append(builder, int.to_string(item.id))
  let builder = case item.encrypted {
    True -> {
      let builder = string_builder.append(builder, "/encrypt")

      builder
    }
    False -> {
      builder
    }
  }
  let builder =
    string_builder.append(
      builder,
      "\"
      hx-target=\"#item-",
    )
  let builder = string_builder.append(builder, int.to_string(item.id))
  let builder =
    string_builder.append(
      builder,
      "\"
    >ğŸ—˜</a>

    <button
      class=\"destroy\"
      hx-delete=\"/posts/",
    )
  let builder = string_builder.append(builder, int.to_string(item.id))
  let builder =
    string_builder.append(
      builder,
      "\"
      hx-target=\"#item-",
    )
  let builder = string_builder.append(builder, int.to_string(item.id))
  let builder =
    string_builder.append(
      builder,
      "\"
    ></button>
    </form>

    <form
      class=\"post-mark\"
      hx-patch=\"/posts/",
    )
  let builder = string_builder.append(builder, int.to_string(item.id))
  let builder = case item.encrypted {
    True -> {
      let builder = string_builder.append(builder, "/encrypt")

      builder
    }
    False -> {
      builder
    }
  }
  let builder =
    string_builder.append(
      builder,
      "\"
      hx-target=\"#item-",
    )
  let builder = string_builder.append(builder, int.to_string(item.id))
  let builder =
    string_builder.append(
      builder,
      "\"
      hx-swap=\"outerHTML\"
    >
      <button></button>
    </form>
  </div>

  <input 
    ",
    )
  let builder = case editing {
    True -> {
      let builder =
        string_builder.append(
          builder,
          "
    autofocus
    onfocus=\"this.setSelectionRange(this.value.length,this.value.length)\"
    ",
        )

      builder
    }
    False -> {
      builder
    }
  }
  let builder =
    string_builder.append(
      builder,
      "
    required
    maxlength=\"500\"
    class=\"edit\"
    type=\"text\"
    name=\"content\"
    value=\"",
    )
  let builder = string_builder.append(builder, glen.escape_html(item.content))
  let builder =
    string_builder.append(
      builder,
      "\"
    hx-patch=\"/posts/",
    )
  let builder = string_builder.append(builder, int.to_string(item.id))
  let builder =
    string_builder.append(
      builder,
      "\"
    hx-target=\"#item-",
    )
  let builder = string_builder.append(builder, int.to_string(item.id))
  let builder =
    string_builder.append(
      builder,
      "\"
    hx-swap=\"outerHTML\"
    hx-trigger=\"blur,keypress[key == 'Enter']\"
  >
",
    )

  builder
}

pub fn render(item item: Item, editing editing: Bool) -> String {
  string_builder.to_string(render_builder(item: item, editing: editing))
}
