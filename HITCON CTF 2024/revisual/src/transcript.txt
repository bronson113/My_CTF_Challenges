[19, 9, 8, 15, 3, 18, 17, 10, 23, 5, 0, 6, 24, 14, 12, 11, 2, 13, 16, 4, 7, 1, 21, 22]
[4, 20, 23, 13, 11, 0, 15, 1, 14, 21, 9, 19, 8, 3, 17, 24, 16, 6, 22, 10, 7, 18, 2, 5, 12]
[5, 7, 22, 13, 0, 23, 17, 20, 12, 10, 19, 4, 24, 3, 8, 6, 16, 14, 21, 11, 1, 9, 18, 2, 15]
4 4.1 4.9
20 20.1 20.9
23 23.1 23.9
13 13.1 13.9
11 11.1 11.9
0 0.09999999999999964 0.9000000000000004
15 15.1 15.9
1 1.0999999999999996 1.9000000000000004
14 14.1 14.9
21 21.1 21.9
9 9.1 9.9
19 19.1 19.9
8 8.1 8.9
3 3.0999999999999996 3.9000000000000004
17 17.1 17.9
24 24.1 24.9
16 16.1 16.9
6 6.100000000000001 6.899999999999999
22 22.1 22.9
10 10.100000000000001 10.899999999999999
7 7.100000000000001 7.899999999999999
18 18.1 18.9
2 2.1000000000000014 2.8999999999999986
5 5.100000000000001 5.899999999999999
12 12.100000000000001 12.899999999999999
7957/16250
931/2500
1161/2500
6841/8125
10133/32500
4226/8125
204/325
4959/32500
4053/6500
20693/32500
2986/8125
1303/6500
15549/32500
73/325
9647/16250
4421/6500
2767/6500
13631/32500
7947/32500
11083/32500
4079/8125
259/650
253/2500
9769/32500
777/8125
4339/16250
{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23}
[(12, 2, 17, 0.4896615384615384, '0', 'temp0'), (2, 20, 7, 0.37240000000000006, '1', 'temp1'), (7, 5, 8, 0.4644, '2', 'temp2'), (0, 5, 16, 0.8419692307692308, '3', 'temp3'), (12, 8, 11, 0.31178461538461544, '4', 'temp4'), (4, 13, 9, 0.5201230769230769, '5', 'temp5'), (14, 3, 12, 0.6276923076923075, '6', 'temp6'), (9, 15, 8, 0.1525846153846154, '7', 'temp7'), (3, 7, 2, 0.6235384615384615, '8', 'temp8'), (13, 2, 7, 0.6367076923076924, '9', 'temp9'), (5, 6, 21, 0.3675076923076923, '10', 'temp10'), (8, 21, 9, 0.20046153846153847, '11', 'temp11'), (19, 12, 3, 0.4784307692307692, '12', 'temp12'), (10, 3, 23, 0.2246153846153846, '13', 'temp13'), (4, 11, 16, 0.5936615384615385, '14', 'temp14'), (18, 1, 8, 0.6801538461538461, '15', 'temp15'), (14, 19, 5, 0.4256923076923077, '16', 'temp16'), (6, 4, 18, 0.41941538461538463, '17', 'temp17'), (7, 9, 14, 0.24452307692307693, '18', 'temp18'), (6, 4, 7, 0.3410153846153846, '19', 'temp19'), (2, 23, 17, 0.5020307692307693, '20', 'temp20'), (7, 19, 12, 0.3984615384615384, '21', 'temp21'), (23, 11, 20, 0.10120000000000001, '22', 'temp22'), (12, 8, 18, 0.3005846153846154, '23', 'temp23'), (12, 9, 21, 0.09563076923076924, '24', 'temp24'), (19, 8, 22, 0.26701538461538465, '25', 'temp25')]
0.6235384615384615 0.10120000000000001 0.20046153846153847
calc_canvas.calc_tri(15.588461538461537, 2.5300000000000002, 5.0115384615384615, 21, 18) == 0.5353483786982249
0.20046153846153847 0.31178461538461544 0.4896615384615384
calc_canvas.calc_tri(5.0115384615384615, 7.794615384615386, 12.241538461538461, 4, 0) == 0.0426426627218935
0.6801538461538461 0.6367076923076924 0.3005846153846154
calc_canvas.calc_tri(17.00384615384615, 15.91769230769231, 7.514615384615385, 12, 22) == 0.35424160946745553
0.20046153846153847 0.6801538461538461 0.41941538461538463
calc_canvas.calc_tri(5.0115384615384615, 17.00384615384615, 10.485384615384616, 9, 0) == 0.1316865562130177
0.6367076923076924 0.09563076923076924 0.41941538461538463
calc_canvas.calc_tri(15.91769230769231, 2.390769230769231, 10.485384615384616, 1, 2) == 0.688061550295858
0.5020307692307693 0.3984615384615384 0.10120000000000001
calc_canvas.calc_tri(12.550769230769232, 9.96153846153846, 2.5300000000000002, 10, 2) == 0.7146429230769231
0.3984615384615384 0.5936615384615385 0.37240000000000006
calc_canvas.calc_tri(9.96153846153846, 14.841538461538462, 9.310000000000002, 10, 3) == 0.8419481301775147
0.20046153846153847 0.3984615384615384 0.3675076923076923
calc_canvas.calc_tri(5.0115384615384615, 9.96153846153846, 9.187692307692307, 13, 23) == 0.13850963313609468
0.3005846153846154 0.5201230769230769 0.5020307692307693
calc_canvas.calc_tri(7.514615384615385, 13.003076923076923, 12.550769230769232, 24, 16) == 0.1650677633136095
0.3675076923076923 0.2246153846153846 0.6276923076923075
calc_canvas.calc_tri(9.187692307692307, 5.615384615384615, 15.692307692307688, 10, 2) == 0.7636094201183432
0.3410153846153846 0.09563076923076924 0.3675076923076923
calc_canvas.calc_tri(8.525384615384615, 2.390769230769231, 9.187692307692307, 4, 9) == 0.771196426035503
0.5020307692307693 0.3410153846153846 0.41941538461538463
calc_canvas.calc_tri(12.550769230769232, 8.525384615384615, 10.485384615384616, 24, 0) == 0.40248414201183436
0.4896615384615384 0.26701538461538465 0.4784307692307692
calc_canvas.calc_tri(12.241538461538461, 6.675384615384616, 11.96076923076923, 15, 7) == 0.4820614319526627
0.8419692307692308 0.37240000000000006 0.2246153846153846
calc_canvas.calc_tri(21.04923076923077, 9.310000000000002, 5.615384615384615, 23, 1) == 0.45585272189349113
0.26701538461538465 0.2246153846153846 0.4896615384615384
calc_canvas.calc_tri(6.675384615384616, 5.615384615384615, 12.241538461538461, 7, 17) == 0.5789388639053255
0.2246153846153846 0.3984615384615384 0.6235384615384615
calc_canvas.calc_tri(5.615384615384615, 9.96153846153846, 15.588461538461537, 19, 4) == 0.4070449112426035
0.5936615384615385 0.4896615384615384 0.10120000000000001
calc_canvas.calc_tri(14.841538461538462, 12.241538461538461, 2.5300000000000002, 21, 13) == 0.5890136686390534
0.5201230769230769 0.31178461538461544 0.5936615384615385
calc_canvas.calc_tri(13.003076923076923, 7.794615384615386, 14.841538461538462, 7, 22) == 0.1431075384615385
0.10120000000000001 0.6276923076923075 0.26701538461538465
calc_canvas.calc_tri(2.5300000000000002, 15.692307692307688, 6.675384615384616, 22, 24) == 0.8675524260355031
0.10120000000000001 0.6801538461538461 0.5201230769230769
calc_canvas.calc_tri(2.5300000000000002, 17.00384615384615, 13.003076923076923, 3, 10) == 0.6105487218934911
0.3005846153846154 0.26701538461538465 0.09563076923076924
calc_canvas.calc_tri(7.514615384615385, 6.675384615384616, 2.390769230769231, 2, 16) == 0.6017119526627219
0.2246153846153846 0.3984615384615384 0.09563076923076924
calc_canvas.calc_tri(5.615384615384615, 9.96153846153846, 2.390769230769231, 24, 5) == 0.23021725443786975
0.3675076923076923 0.3005846153846154 0.41941538461538463
calc_canvas.calc_tri(9.187692307692307, 7.514615384615385, 10.485384615384616, 17, 3) == 0.6308902248520711
0.3675076923076923 0.4896615384615384 0.8419692307692308
calc_canvas.calc_tri(9.187692307692307, 12.241538461538461, 21.04923076923077, 22, 2) == 0.7687986982248523
0.3410153846153846 0.31178461538461544 0.5020307692307693
calc_canvas.calc_tri(8.525384615384615, 7.794615384615386, 12.550769230769232, 15, 20) == 0.30283899408284026
0.31178461538461544 0.20046153846153847 0.5201230769230769
calc_canvas.calc_tri(7.794615384615386, 5.0115384615384615, 13.003076923076923, 10, 14) == 0.0753726982248521
0.26701538461538465 0.10120000000000001 0.3005846153846154
calc_canvas.calc_tri(6.675384615384616, 2.5300000000000002, 7.514615384615385, 19, 12) == 0.5991263668639054
0.5936615384615385 0.4784307692307692 0.20046153846153847
calc_canvas.calc_tri(14.841538461538462, 11.96076923076923, 5.0115384615384615, 8, 11) == 0.46613921893491117
0.6235384615384615 0.3675076923076923 0.31178461538461544
calc_canvas.calc_tri(15.588461538461537, 9.187692307692307, 7.794615384615386, 0, 13) == 0.917547775147929
0.24452307692307693 0.41941538461538463 0.3005846153846154
calc_canvas.calc_tri(6.113076923076923, 10.485384615384616, 7.514615384615385, 19, 0) == 0.5156906745562131
0.3984615384615384 0.6276923076923075 0.2246153846153846
calc_canvas.calc_tri(9.96153846153846, 15.692307692307688, 5.615384615384615, 8, 13) == 0.8575289940828401
0.1525846153846154 0.5020307692307693 0.3984615384615384
calc_canvas.calc_tri(3.814615384615385, 12.550769230769232, 9.96153846153846, 23, 22) == 0.5446086627218935
0.4784307692307692 0.6235384615384615 0.3005846153846154
calc_canvas.calc_tri(11.96076923076923, 15.588461538461537, 7.514615384615385, 24, 6) == 0.6212901775147928
0.3984615384615384 0.10120000000000001 0.6801538461538461
calc_canvas.calc_tri(9.96153846153846, 2.5300000000000002, 17.00384615384615, 23, 17) == 0.8079170887573962
0.5936615384615385 0.4896615384615384 0.24452307692307693
calc_canvas.calc_tri(14.841538461538462, 12.241538461538461, 6.113076923076923, 18, 16) == 0.5095875621301775
0.6367076923076924 0.3984615384615384 0.24452307692307693
calc_canvas.calc_tri(15.91769230769231, 9.96153846153846, 6.113076923076923, 13, 21) == 0.8482301420118343
0.09563076923076924 0.5201230769230769 0.20046153846153847
calc_canvas.calc_tri(2.390769230769231, 13.003076923076923, 5.0115384615384615, 8, 19) == 0.5195814319526626
0.4644 0.41941538461538463 0.8419692307692308
calc_canvas.calc_tri(11.61, 10.485384615384616, 21.04923076923077, 12, 15) == 0.6894559171597634
0.20046153846153847 0.4256923076923077 0.10120000000000001
calc_canvas.calc_tri(5.0115384615384615, 10.642307692307693, 2.5300000000000002, 16, 5) == 0.1242453727810651
{'temp0', 'temp24', 'temp5', 'temp1', 'temp13', 'temp17', 'temp8', 'temp14', 'temp22', 'temp15', 'temp10', 'temp19', 'temp20', 'temp25', 'temp11', 'temp2', 'temp12', 'temp9', 'temp23', 'temp3', 'temp18', 'temp4', 'temp6', 'temp7', 'temp21', 'temp16'}
for script.js


let temp0 = calc_canvas.wtf(key[12], key[2], key[17]) * 25;
let temp1 = calc_canvas.wtf(key[2], key[20], key[7]) * 25;
let temp2 = calc_canvas.wtf(key[7], key[5], key[8]) * 25;
let temp3 = calc_canvas.wtf(key[0], key[5], key[16]) * 25;
let temp4 = calc_canvas.wtf(key[12], key[8], key[11]) * 25;
let temp5 = calc_canvas.wtf(key[4], key[13], key[9]) * 25;
let temp6 = calc_canvas.wtf(key[14], key[3], key[12]) * 25;
let temp7 = calc_canvas.wtf(key[9], key[15], key[8]) * 25;
let temp8 = calc_canvas.wtf(key[3], key[7], key[2]) * 25;
let temp9 = calc_canvas.wtf(key[13], key[2], key[7]) * 25;
let temp10 = calc_canvas.wtf(key[5], key[6], key[21]) * 25;
let temp11 = calc_canvas.wtf(key[8], key[21], key[9]) * 25;
let temp12 = calc_canvas.wtf(key[19], key[12], key[3]) * 25;
let temp13 = calc_canvas.wtf(key[10], key[3], key[23]) * 25;
let temp14 = calc_canvas.wtf(key[4], key[11], key[16]) * 25;
let temp15 = calc_canvas.wtf(key[18], key[1], key[8]) * 25;
let temp16 = calc_canvas.wtf(key[14], key[19], key[5]) * 25;
let temp17 = calc_canvas.wtf(key[6], key[4], key[18]) * 25;
let temp18 = calc_canvas.wtf(key[7], key[9], key[14]) * 25;
let temp19 = calc_canvas.wtf(key[6], key[4], key[7]) * 25;
let temp20 = calc_canvas.wtf(key[2], key[23], key[17]) * 25;
let temp21 = calc_canvas.wtf(key[7], key[19], key[12]) * 25;
let temp22 = calc_canvas.wtf(key[23], key[11], key[20]) * 25;
let temp23 = calc_canvas.wtf(key[12], key[8], key[18]) * 25;
let temp24 = calc_canvas.wtf(key[12], key[9], key[21]) * 25;
let temp25 = calc_canvas.wtf(key[19], key[8], key[22]) * 25;
let res = 0;
res += abs(0.5353483786982249 - calc_canvas.gtfo(temp8, temp22, temp11, 21, 18));
res += abs(0.0426426627218935 - calc_canvas.gtfo(temp11, temp4, temp0, 4, 0));
res += abs(0.35424160946745553 - calc_canvas.gtfo(temp15, temp9, temp23, 12, 22));
res += abs(0.1316865562130177 - calc_canvas.gtfo(temp11, temp15, temp17, 9, 0));
res += abs(0.688061550295858 - calc_canvas.gtfo(temp9, temp24, temp17, 1, 2));
res += abs(0.7146429230769231 - calc_canvas.gtfo(temp20, temp21, temp22, 10, 2));
res += abs(0.8419481301775147 - calc_canvas.gtfo(temp21, temp14, temp1, 10, 3));
res += abs(0.13850963313609468 - calc_canvas.gtfo(temp11, temp21, temp10, 13, 23));
res += abs(0.1650677633136095 - calc_canvas.gtfo(temp23, temp5, temp20, 24, 16));
res += abs(0.7636094201183432 - calc_canvas.gtfo(temp10, temp13, temp6, 10, 2));
res += abs(0.771196426035503 - calc_canvas.gtfo(temp19, temp24, temp10, 4, 9));
res += abs(0.40248414201183436 - calc_canvas.gtfo(temp20, temp19, temp17, 24, 0));
res += abs(0.4820614319526627 - calc_canvas.gtfo(temp0, temp25, temp12, 15, 7));
res += abs(0.45585272189349113 - calc_canvas.gtfo(temp3, temp1, temp13, 23, 1));
res += abs(0.5789388639053255 - calc_canvas.gtfo(temp25, temp13, temp0, 7, 17));
res += abs(0.4070449112426035 - calc_canvas.gtfo(temp13, temp21, temp8, 19, 4));
res += abs(0.5890136686390534 - calc_canvas.gtfo(temp14, temp0, temp22, 21, 13));
res += abs(0.1431075384615385 - calc_canvas.gtfo(temp5, temp4, temp14, 7, 22));
res += abs(0.8675524260355031 - calc_canvas.gtfo(temp22, temp6, temp25, 22, 24));
res += abs(0.6105487218934911 - calc_canvas.gtfo(temp22, temp15, temp5, 3, 10));
res += abs(0.6017119526627219 - calc_canvas.gtfo(temp23, temp25, temp24, 2, 16));
res += abs(0.23021725443786975 - calc_canvas.gtfo(temp13, temp21, temp24, 24, 5));
res += abs(0.6308902248520711 - calc_canvas.gtfo(temp10, temp23, temp17, 17, 3));
res += abs(0.7687986982248523 - calc_canvas.gtfo(temp10, temp0, temp3, 22, 2));
res += abs(0.30283899408284026 - calc_canvas.gtfo(temp19, temp4, temp20, 15, 20));
res += abs(0.0753726982248521 - calc_canvas.gtfo(temp4, temp11, temp5, 10, 14));
res += abs(0.5991263668639054 - calc_canvas.gtfo(temp25, temp22, temp23, 19, 12));
res += abs(0.46613921893491117 - calc_canvas.gtfo(temp14, temp12, temp11, 8, 11));
res += abs(0.917547775147929 - calc_canvas.gtfo(temp8, temp10, temp4, 0, 13));
res += abs(0.5156906745562131 - calc_canvas.gtfo(temp18, temp17, temp23, 19, 0));
res += abs(0.8575289940828401 - calc_canvas.gtfo(temp21, temp6, temp13, 8, 13));
res += abs(0.5446086627218935 - calc_canvas.gtfo(temp7, temp20, temp21, 23, 22));
res += abs(0.6212901775147928 - calc_canvas.gtfo(temp12, temp8, temp23, 24, 6));
res += abs(0.8079170887573962 - calc_canvas.gtfo(temp21, temp22, temp15, 23, 17));
res += abs(0.5095875621301775 - calc_canvas.gtfo(temp14, temp0, temp18, 18, 16));
res += abs(0.8482301420118343 - calc_canvas.gtfo(temp9, temp21, temp18, 13, 21));
res += abs(0.5195814319526626 - calc_canvas.gtfo(temp24, temp5, temp11, 8, 19));
res += abs(0.6894559171597634 - calc_canvas.gtfo(temp2, temp17, temp3, 12, 15));
res += abs(0.1242453727810651 - calc_canvas.gtfo(temp11, temp16, temp22, 16, 5));

  if (res > 0.00001) {
    return null;
  }
  s = "";

s += Math.round(calc_canvas.wtf(key[10], key[21], key[16])*100000).toString();
s += Math.round(calc_canvas.wtf(key[14], key[3], key[9])*100000).toString();
s += Math.round(calc_canvas.wtf(key[18], key[12], key[21])*100000).toString();
s += Math.round(calc_canvas.wtf(key[18], key[5], key[22])*100000).toString();
s += Math.round(calc_canvas.wtf(key[6], key[18], key[20])*100000).toString();
s += Math.round(calc_canvas.wtf(key[7], key[18], key[22])*100000).toString();
s += Math.round(calc_canvas.wtf(key[7], key[3], key[12])*100000).toString();
s += Math.round(calc_canvas.wtf(key[23], key[11], key[2])*100000).toString();
s += Math.round(calc_canvas.wtf(key[16], key[20], key[22])*100000).toString();
s += Math.round(calc_canvas.wtf(key[5], key[19], key[4])*100000).toString();
s += Math.round(calc_canvas.wtf(key[5], key[18], key[2])*100000).toString();
s += Math.round(calc_canvas.wtf(key[6], key[17], key[4])*100000).toString();
s += Math.round(calc_canvas.wtf(key[17], key[19], key[4])*100000).toString();
s += Math.round(calc_canvas.wtf(key[20], key[18], key[10])*100000).toString();
s += Math.round(calc_canvas.wtf(key[15], key[16], key[23])*100000).toString();
s += Math.round(calc_canvas.wtf(key[9], key[21], key[8])*100000).toString();
s += Math.round(calc_canvas.wtf(key[17], key[13], key[22])*100000).toString();
s += Math.round(calc_canvas.wtf(key[8], key[5], key[12])*100000).toString();
s += Math.round(calc_canvas.wtf(key[16], key[5], key[23])*100000).toString();
s += Math.round(calc_canvas.wtf(key[23], key[14], key[18])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[6], key[12], key[10], key[18], key[0])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[23], key[3], key[5], key[2], key[8])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[21], key[2], key[13], key[18], key[9])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[11], key[21], key[0], key[20], key[5])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[5], key[6], key[16], key[7], key[1])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[19], key[18], key[5], key[0], key[12])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[16], key[4], key[13], key[5], key[11])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[15], key[13], key[17], key[22], key[4])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[0], key[19], key[7], key[5], key[8])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[15], key[3], key[21], key[14], key[18])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[13], key[19], key[14], key[5], key[9])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[17], key[19], key[0], key[7], key[11])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[17], key[15], key[21], key[22], key[18])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[10], key[6], key[19], key[16], key[1])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[2], key[11], key[4], key[12], key[17])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[3], key[22], key[0], key[13], key[10])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[2], key[16], key[13], key[20], key[12])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[10], key[23], key[21], key[7], key[22])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[12], key[9], key[10], key[6], key[19])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[6], key[11], key[12], key[9], key[18])*100000).toString();
74929320495118881298256315618264846371602857265086745421775128665136467729216062523635269291677233783008640705723065160078137585856717556452413608048957417261835685131454567208332959618376223516931703
[(10, 21, 16, 74929), (14, 3, 9, 32049), (18, 12, 21, 51188), (18, 5, 22, 81298), (6, 18, 20, 25631), (7, 18, 22, 56182), (7, 3, 12, 64846), (23, 11, 2, 37160), (16, 20, 22, 28572), (5, 19, 4, 65086), (5, 18, 2, 74542), (6, 17, 4, 17751), (17, 19, 4, 28665), (20, 18, 10, 13646), (15, 16, 23, 77292), (9, 21, 8, 16062), (17, 13, 22, 52363), (8, 5, 12, 52692), (16, 5, 23, 91677), (23, 14, 18, 23378), (6, 12, 10, 18, 0, 30086), (23, 3, 5, 2, 8, 40705), (21, 2, 13, 18, 9, 72306), (11, 21, 0, 20, 5, 51600), (5, 6, 16, 7, 1, 78137), (19, 18, 5, 0, 12, 58585), (16, 4, 13, 5, 11, 67175), (15, 13, 17, 22, 4, 56452), (0, 19, 7, 5, 8, 41360), (15, 3, 21, 14, 18, 80489), (13, 19, 14, 5, 9, 57417), (17, 19, 0, 7, 11, 26183), (17, 15, 21, 22, 18, 56851), (10, 6, 19, 16, 1, 31454), (2, 11, 4, 12, 17, 56720), (3, 22, 0, 13, 10, 83329), (2, 16, 13, 20, 12, 59618), (10, 23, 21, 7, 22, 37622), (12, 9, 10, 6, 19, 35169), (6, 11, 12, 9, 18, 31703)]
7e316b2161126343d858e42982dbe3e6252ace8231c45e6442935656cecfcc4d
dac7111f650863c62ae6efa8787e41805b46ab8b07e13e8d35edcbd5c28aa0a3829464f7946df5fb23ef327125e8198f13edd9af9b6d69dddb8da3a0410d2e20bbf5fa5538ca9429a898831fc8baa0d55ba12364608631187d85636295e297eff9b0140d4361cdca0979cfe6a9f8f947
aad72c365ef6077cca7d577e2d133275
b'hitcon{hidden_calculation_through_varying_shader_variables_auto-magical_interpolation_0c4ea0d9d4d9518}\n\n\n\n\n\n\n\n\n\n'
s += Math.round(calc_canvas.gtfo(key[22], key[18], key[11], key[20], key[14])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[17], key[3], key[11], key[19], key[9])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[4], key[11], key[19], key[8], key[0])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[20], key[2], key[13], key[12], key[5])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[4], key[11], key[20], key[18], key[21])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[18], key[16], key[20], key[1], key[6])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[0], key[16], key[18], key[12], key[13])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[18], key[19], key[10], key[20], key[2])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[4], key[12], key[16], key[20], key[0])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[15], key[12], key[8], key[21], key[5])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[21], key[17], key[1], key[3], key[2])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[13], key[10], key[9], key[8], key[15])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[2], key[11], key[18], key[22], key[16])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[13], key[0], key[23], key[16], key[10])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[2], key[4], key[23], key[7], key[13])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[2], key[1], key[6], key[17], key[4])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[4], key[16], key[7], key[21], key[20])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[15], key[14], key[9], key[0], key[4])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[14], key[23], key[13], key[9], key[21])*100000).toString();
s += Math.round(calc_canvas.gtfo(key[10], key[0], key[9], key[6], key[3])*100000).toString();
for solve.sage


goal1 = (
(temp[0], key[12], key[2], key[17]),
(temp[1], key[2], key[20], key[7]),
(temp[2], key[7], key[5], key[8]),
(temp[3], key[0], key[5], key[16]),
(temp[4], key[12], key[8], key[11]),
(temp[5], key[4], key[13], key[9]),
(temp[6], key[14], key[3], key[12]),
(temp[7], key[9], key[15], key[8]),
(temp[8], key[3], key[7], key[2]),
(temp[9], key[13], key[2], key[7]),
(temp[10], key[5], key[6], key[21]),
(temp[11], key[8], key[21], key[9]),
(temp[12], key[19], key[12], key[3]),
(temp[13], key[10], key[3], key[23]),
(temp[14], key[4], key[11], key[16]),
(temp[15], key[18], key[1], key[8]),
(temp[16], key[14], key[19], key[5]),
(temp[17], key[6], key[4], key[18]),
(temp[18], key[7], key[9], key[14]),
(temp[19], key[6], key[4], key[7]),
(temp[20], key[2], key[23], key[17]),
(temp[21], key[7], key[19], key[12]),
(temp[22], key[23], key[11], key[20]),
(temp[23], key[12], key[8], key[18]),
(temp[24], key[12], key[9], key[21]),
(temp[25], key[19], key[8], key[22]),
)
goal = (
(0.5353483786982249, 8, 22, 11, 21, 18),
(0.0426426627218935, 11, 4, 0, 4, 0),
(0.35424160946745553, 15, 9, 23, 12, 22),
(0.1316865562130177, 11, 15, 17, 9, 0),
(0.688061550295858, 9, 24, 17, 1, 2),
(0.7146429230769231, 20, 21, 22, 10, 2),
(0.8419481301775147, 21, 14, 1, 10, 3),
(0.13850963313609468, 11, 21, 10, 13, 23),
(0.1650677633136095, 23, 5, 20, 24, 16),
(0.7636094201183432, 10, 13, 6, 10, 2),
(0.771196426035503, 19, 24, 10, 4, 9),
(0.40248414201183436, 20, 19, 17, 24, 0),
(0.4820614319526627, 0, 25, 12, 15, 7),
(0.45585272189349113, 3, 1, 13, 23, 1),
(0.5789388639053255, 25, 13, 0, 7, 17),
(0.4070449112426035, 13, 21, 8, 19, 4),
(0.5890136686390534, 14, 0, 22, 21, 13),
(0.1431075384615385, 5, 4, 14, 7, 22),
(0.8675524260355031, 22, 6, 25, 22, 24),
(0.6105487218934911, 22, 15, 5, 3, 10),
(0.6017119526627219, 23, 25, 24, 2, 16),
(0.23021725443786975, 13, 21, 24, 24, 5),
(0.6308902248520711, 10, 23, 17, 17, 3),
(0.7687986982248523, 10, 0, 3, 22, 2),
(0.30283899408284026, 19, 4, 20, 15, 20),
(0.0753726982248521, 4, 11, 5, 10, 14),
(0.5991263668639054, 25, 22, 23, 19, 12),
(0.46613921893491117, 14, 12, 11, 8, 11),
(0.917547775147929, 8, 10, 4, 0, 13),
(0.5156906745562131, 18, 17, 23, 19, 0),
(0.8575289940828401, 21, 6, 13, 8, 13),
(0.5446086627218935, 7, 20, 21, 23, 22),
(0.6212901775147928, 12, 8, 23, 24, 6),
(0.8079170887573962, 21, 22, 15, 23, 17),
(0.5095875621301775, 14, 0, 18, 18, 16),
(0.8482301420118343, 9, 21, 18, 13, 21),
(0.5195814319526626, 24, 5, 11, 8, 19),
(0.6894559171597634, 2, 17, 3, 12, 15),
(0.1242453727810651, 11, 16, 22, 16, 5),
)
